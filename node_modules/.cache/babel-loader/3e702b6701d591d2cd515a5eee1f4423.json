{"ast":null,"code":"var _jsxFileName = \"/Users/bruce/Desktop/papa-list/papa-takehome/src/TaskListWrap.js\";\nimport React from 'react'; //import react library\n\nimport { toDoList } from './ListData'; //import todo list data\n\nimport { PurchaseTodoList } from './PurchaseTodoList'; //import purchaseTodolist\n\nimport { AirplaneTodoList } from './AirplaneTodoList'; //import airplaneTodoList\n\nvar completedPurchasesCounter = 0; //declare counter to keep count of number of completed purchase items\n\nvar completedAirplaneCounter = 0; //declare counter to keep count of number of completed airplane items\n//creating an wrap class for todolist\n\nexport class TaskListWrap extends React.Component {\n  //on click of purchase wrap, show list\n  constructor(props) {\n    super(props);\n    this.state = {\n      hidePurchaseList: true,\n      hideAirplaneList: true,\n      hidePurchaseDetails: false,\n      hideAirplaneDetails: false,\n      hideGroupsButton: true,\n      purchaseListCompletedCount: 0,\n      airplaneListCompletedCount: 0,\n      headingText: 'Things To Do'\n    };\n    this.showPurchaseList = this.showPurchaseList.bind(this); //bind showPurchaseList function\n\n    this.showAirplaneList = this.showAirplaneList.bind(this); //bind showAirplaneList function\n\n    this.showFullList = this.showFullList.bind(this); //bind showFullList function\n  } //function to show the Purchases list\n\n\n  showPurchaseList(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.setState(prevState => ({\n      hidePurchaseList: !prevState,\n      hidePurchaseDetails: prevState,\n      hideAirplaneDetails: prevState,\n      hideGroupsButton: !prevState\n    }));\n    this.updateHeading('purchase'); //set heading\n  } //function to show the Build Airplane list\n\n\n  showAirplaneList(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.setState(prevState => ({\n      hideAirplaneList: !prevState,\n      hidePurchaseDetails: prevState,\n      hideAirplaneDetails: prevState,\n      hideGroupsButton: !prevState\n    }));\n    this.updateHeading('airplane'); //set heading\n  } //function to update the heading text based on the view\n\n\n  updateHeading(heading) {\n    var headingText = '';\n\n    if (heading === 'purchase') {\n      headingText = 'Purchases'; //set heading text\n    } else if (heading === 'airplane') {\n      headingText = 'Build Airplane'; //set heading text\n    } else {}\n\n    this.setState(prevState => ({\n      headingText: headingText\n    }));\n  } //function to show main view, with both list details\n\n\n  showFullList(e) {\n    e.preventDefault();\n    e.stopPropagation(); //setting the state\n\n    this.setState(prevState => ({\n      hidePurchaseList: true,\n      hideAirplaneList: true,\n      hidePurchaseDetails: false,\n      hideAirplaneDetails: false,\n      hideGroupsButton: true,\n      purchaseListCompletedCount: completedPurchasesCounter,\n      airplaneListCompletedCount: completedAirplaneCounter,\n      headingText: 'Things To Do'\n    }));\n  }\n\n  render() {\n    var totalPurchaseCounter = 0; //initializing the total purchase counter\n\n    var totalAirplaneCounter = 0; //initializing the total airplane counter\n\n    toDoList.map(item => {\n      if (item.group === 'Purchases') {\n        totalPurchaseCounter++; //increment purchase counter\n      } else {\n        totalAirplaneCounter++; //increment airplane counter\n      }\n    }); //return html markup for the main list view\n\n    return React.createElement(\"div\", {\n      className: \"col-md-7 listwrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container listHeadingWrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"listHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, this.state.headingText), React.createElement(\"p\", {\n      onClick: this.showFullList,\n      className: \"allGroupsBtn\",\n      hidden: this.state.hideGroupsButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"All Groups\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"purchaseListWrap \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container segment\",\n      onClick: this.showPurchaseList,\n      hidden: this.state.hidePurchaseDetails,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"fa fa-caret-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"segmentLabelItem\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Purchases\"), React.createElement(\"p\", {\n      className: \"segmentLabelItem segmentPitem\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"\\xA0\\xA0\\xA0\", this.state.purchaseListCompletedCount, \" of \", totalPurchaseCounter, \" tasks complete\")), React.createElement(\"div\", {\n      className: \"purchaseList\",\n      hidden: this.state.hidePurchaseList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(PurchaseTodoList, {\n      completedCount: this.state.completedPurchasesCounter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"airplaneListWrap \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container segment airplaneSegment\",\n      onClick: this.showAirplaneList,\n      hidden: this.state.hideAirplaneDetails,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"fa fa-caret-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"segmentLabelItem\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Build Airplane\"), React.createElement(\"p\", {\n      className: \"segmentLabelItem segmentPitem \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"\\xA0\\xA0\\xA0\", this.state.airplaneListCompletedCount, \" of \", totalAirplaneCounter, \" tasks complete\")), React.createElement(\"div\", {\n      className: \"airplaneList\",\n      hidden: this.state.hideAirplaneList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(AirplaneTodoList, {\n      completedCount: this.state.purchaseListCompletedCount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    })))));\n  }\n\n} //creating a single todo item class\n\nexport class SingleItem extends React.Component {\n  constructor(props) {\n    super(props); //set initial state for todo items\n\n    this.state = {\n      'disabled': false,\n      'completedAt': '',\n      'completed': false,\n      'itemId': this.props.id //set initial state for todo items with no dependency ids\n\n    };\n\n    if (this.props.id !== 1 && this.props.id !== 8) {\n      this.state = {\n        'disabled': true,\n        'completedAt': '',\n        'completed': false,\n        'itemId': this.props.id\n      };\n    }\n\n    this.toggleComplete = this.toggleComplete.bind(this); //binding toggleComplete function\n\n    this.removeDisable = this.removeDisable.bind(this); //binding removeDisable function\n  } //function to toggle the state of complete/checked for the list items\n\n\n  toggleComplete(e) {\n    //e.preventDefault();\n    //e.stopPropagation();\n    //on checkbox isChecked(change), update completedAt with timestamp, else, remove timesamp(set to null)\n    if (this.props.group === 'Purchases') {\n      if (this.state.completed === false) {\n        //if the item is not complete\n        completedPurchasesCounter++; //increment purchase counter\n        //set the state\n\n        this.setState({\n          completedAt: new Date(),\n          completed: true,\n          completedPurchases: completedPurchasesCounter\n        });\n      } else {\n        // if the item is complete\n        if (completedPurchasesCounter !== 0) {\n          //if the counter is not 0(preventing negatives)\n          completedPurchasesCounter--; //decrement purchase counter \n        } //set the state\n\n\n        this.setState(prevState => ({\n          completedAt: '',\n          completed: false,\n          completedPurchases: completedPurchasesCounter\n        }));\n      }\n    } else {\n      if (this.state.completedAt === '') {\n        //if the item is not complete\n        completedAirplaneCounter++; //increment airplane counter\n        //set standard state\n\n        this.setState({\n          completedAt: new Date(),\n          completed: true\n        }); //set state based on previous states\n\n        this.setState(prevState => ({\n          completedAt: prevState,\n          completed: prevState,\n          completedPurchases: completedAirplaneCounter\n        }));\n      } else {\n        //if the item is complete\n        if (completedAirplaneCounter !== 0) {\n          //if the counter is not 0(preventing negatives)\n          completedAirplaneCounter--; //decrement airplane counter\n        } //set state based on previous states\n\n\n        this.setState(prevState => ({\n          completedAt: '',\n          completed: false,\n          completedPurchases: completedAirplaneCounter\n        }));\n      }\n    }\n\n    this.removeDisable(); //remove disable attribute from items\n  }\n\n  removeDisable(e) {\n    //looping through all todo list items\n    toDoList.map(todoItem => {\n      var ids = todoItem.dependencyIds; //declaring dependency ID list\n\n      var id = todoItem.id; //declaring item ID\n      //looping through item's dependency id list\n\n      ids.map(item => {\n        let currentItemString = \"itemID\" + id;\n        var currentItem = document.getElementById(currentItemString); //declaring the current item being changed\n\n        let idString = \"itemID\" + item;\n        var depenencyItem = document.getElementById(idString); //declaring the dependency items based on the item being changed\n\n        if (depenencyItem !== null) {\n          //if there is a dependency item\n          if (!depenencyItem.checked === true) {\n            //if dependency item is not checked\n            let spanIdString = \"spanID\" + id;\n            var lockSpan = document.getElementById(spanIdString); //getting the element's span with lock\n\n            lockSpan.classList.add('disabledLock');\n            lockSpan.classList.add('fa');\n            lockSpan.classList.add('fa-lock');\n            let labelIdString = \"labelID\" + id;\n            var labelSpan = document.getElementById(labelIdString); //getting the element's label \n\n            labelSpan.classList.add('disabledLock');\n            labelSpan.classList.remove('doneTextStyle');\n            currentItem.checked = false; //setting the current item to Not checked\n\n            if (this.props.id !== 1 && this.props.id !== 8) {\n              currentItem.setAttribute('disabled', true); //set item to disabled\n\n              if (this.state.completed === true) {\n                //if the item is completed\n                if (this.props.group === 'Purchases') {\n                  //to prevent negative numbers\n                  if (completedPurchasesCounter !== 0) {\n                    completedPurchasesCounter = completedPurchasesCounter--; //decrement counter\n                  } //set state\n\n\n                  this.setState(prevState => ({\n                    disabled: true,\n                    completed: true\n                  }));\n                } else {\n                  //to prevent negative numbers\n                  if (completedAirplaneCounter !== 0) {\n                    completedAirplaneCounter = completedAirplaneCounter--; //decrement counter\n                  } //set state\n\n\n                  this.setState(prevState => ({\n                    disabled: true,\n                    completed: false\n                  }));\n                }\n              }\n            } else if (this.state.itemId === 1 || this.state.itemId === 8) {\n              this.setState(prevState => ({\n                disabled: false,\n                completed: prevState.completed\n              }));\n            }\n          } else {\n            currentItem.removeAttribute('disabled'); //remove disabled attribute\n\n            let spanIdString = \"spanID\" + id;\n            let lockSpan = document.getElementById(spanIdString); //getting the element's span with lock\n\n            lockSpan.classList.remove('disabledLock');\n            lockSpan.classList.remove('fa-lock');\n            let labelIdString = \"labelID\" + id;\n            let labelSpan = document.getElementById(labelIdString); //getting the element's label\n\n            labelSpan.classList.remove('disabledLock'); //set state\n\n            this.setState(prevState => ({\n              disabled: false\n            }));\n          }\n        } else {\n          console.log('no dependency item');\n        }\n      });\n    }); //if the item with this dependency id# is NOT disabled (state is NOT disabled)\n    //then this item is not disabled (state is not disabled)\n  }\n\n  render() {\n    if (this.state.completedAt) {\n      //if item has completedAt state\n      if (this.state.completedAt !== '') {\n        var checkComplete = true; //add checkmark\n\n        var completedTaskClass = 'doneTextStyle'; //add class for done text\n\n        var disabledLock = ''; //add class for lock\n      } else {\n        var checkComplete = false; //add checkmark\n\n        var completedTaskClass = ''; //add class for done text\n\n        var disabledLock = 'fa fa-lock'; //add class for lock\n      }\n    } else {\n      var checkComplete = false; //add checkmark\n\n      var completedTaskClass = ''; //add class for done text\n\n      if (this.state.completed === false && this.state.disabled === false) {\n        var disabledLock = ''; //add class for lock\n      } else {\n        var disabledLock = 'fa fa-lock'; //add class for lock\n      }\n    }\n\n    if (this.state.itemId === 1) {\n      var disabledLock = ''; //add class for lock\n    }\n\n    if (this.state.itemId === 8) {\n      var disabledLock = ''; //add class for lock\n    } //return html markup for list item\n\n\n    return React.createElement(\"div\", {\n      key: this.props.id,\n      className: \"segment \" + this.props.group,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"labelContainer disabledItem \" + completedTaskClass,\n      id: \"labelID\" + this.props.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, this.props.task, React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: this.state.checkComplete,\n      keyprop: this.props.id,\n      id: \"itemID\" + this.props.id,\n      value: this.props.id,\n      onChange: this.toggleComplete,\n      disabled: this.state.disabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      id: \"spanID\" + this.props.id,\n      className: \"checkmark checkmark-outline disabledCheckbox disabledLock \" + disabledLock,\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/bruce/Desktop/papa-list/papa-takehome/src/TaskListWrap.js"],"names":["React","toDoList","PurchaseTodoList","AirplaneTodoList","completedPurchasesCounter","completedAirplaneCounter","TaskListWrap","Component","constructor","props","state","hidePurchaseList","hideAirplaneList","hidePurchaseDetails","hideAirplaneDetails","hideGroupsButton","purchaseListCompletedCount","airplaneListCompletedCount","headingText","showPurchaseList","bind","showAirplaneList","showFullList","e","preventDefault","stopPropagation","setState","prevState","updateHeading","heading","render","totalPurchaseCounter","totalAirplaneCounter","map","item","group","SingleItem","id","toggleComplete","removeDisable","completed","completedAt","Date","completedPurchases","todoItem","ids","dependencyIds","currentItemString","currentItem","document","getElementById","idString","depenencyItem","checked","spanIdString","lockSpan","classList","add","labelIdString","labelSpan","remove","setAttribute","disabled","itemId","removeAttribute","console","log","checkComplete","completedTaskClass","disabledLock","task"],"mappings":"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","sourcesContent":["import React from 'react'; //import react library\nimport {toDoList} from './ListData'; //import todo list data\nimport {PurchaseTodoList} from './PurchaseTodoList'; //import purchaseTodolist\nimport {AirplaneTodoList} from './AirplaneTodoList'; //import airplaneTodoList\n\nvar completedPurchasesCounter = 0; //declare counter to keep count of number of completed purchase items\nvar completedAirplaneCounter = 0; //declare counter to keep count of number of completed airplane items\n\n//creating an wrap class for todolist\nexport class TaskListWrap extends React.Component {\n\n  //on click of purchase wrap, show list\n  constructor(props) {\n\n    super(props);\n    this.state = {\n      hidePurchaseList: true,\n      hideAirplaneList: true,\n      hidePurchaseDetails: false,\n      hideAirplaneDetails: false,\n      hideGroupsButton: true,\n      purchaseListCompletedCount: 0,\n      airplaneListCompletedCount: 0,\n      headingText: 'Things To Do'\n    } \n\n    this.showPurchaseList = this.showPurchaseList.bind(this); //bind showPurchaseList function\n    this.showAirplaneList = this.showAirplaneList.bind(this); //bind showAirplaneList function\n    this.showFullList = this.showFullList.bind(this); //bind showFullList function\n\n  }\n\n  //function to show the Purchases list\n  showPurchaseList(e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    this.setState(prevState => ({\n      hidePurchaseList: !prevState,\n      hidePurchaseDetails: prevState,\n      hideAirplaneDetails: prevState,\n      hideGroupsButton: !prevState\n    }));\n\n    this.updateHeading('purchase'); //set heading\n  }\n\n  //function to show the Build Airplane list\n  showAirplaneList(e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    this.setState(prevState => ({\n      hideAirplaneList: !prevState,\n      hidePurchaseDetails: prevState,\n      hideAirplaneDetails: prevState,\n      hideGroupsButton: !prevState\n    }));\n\n    this.updateHeading('airplane'); //set heading\n  }\n\n  //function to update the heading text based on the view\n  updateHeading(heading){\n    var headingText = '';\n\n    if(heading === 'purchase'){\n      headingText = 'Purchases'; //set heading text\n      \n    } else if(heading === 'airplane'){\n      headingText = 'Build Airplane'; //set heading text\n      \n    } else {\n\n    }\n\n    this.setState(prevState => ({\n      headingText: headingText\n    }));\n  }\n\n  //function to show main view, with both list details\n  showFullList(e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    //setting the state\n    this.setState(prevState => ({\n      hidePurchaseList: true,\n      hideAirplaneList: true,\n      hidePurchaseDetails: false,\n      hideAirplaneDetails: false,\n      hideGroupsButton: true,\n      purchaseListCompletedCount: completedPurchasesCounter,\n      airplaneListCompletedCount: completedAirplaneCounter,\n      headingText: 'Things To Do'\n    }));\n\n  }\n\n  render() {\n    var totalPurchaseCounter = 0; //initializing the total purchase counter\n    var totalAirplaneCounter = 0; //initializing the total airplane counter\n    \n    toDoList.map((item) =>{\n\n      if(item.group === 'Purchases'){\n        totalPurchaseCounter++; //increment purchase counter\n        \n      } else {\n        totalAirplaneCounter++; //increment airplane counter\n      }\n\n    });\n\n    //return html markup for the main list view\n    return (\n      <div className=\"col-md-7 listwrap\">\n        <div className=\"container listHeadingWrap\">\n          <h4 className=\"listHeader\">{this.state.headingText}</h4>\n          <p onClick={this.showFullList} className=\"allGroupsBtn\" hidden={this.state.hideGroupsButton}>All Groups</p>\n        </div>\n        <div>\n          <div className=\"purchaseListWrap \">   \n            <div className=\"container segment\" onClick={this.showPurchaseList} hidden={this.state.hidePurchaseDetails}>\n              <span className=\"fa fa-caret-right\"></span>     \n              <label className=\"segmentLabelItem\">Purchases</label>\n              <p className=\"segmentLabelItem segmentPitem\">&nbsp;&nbsp;&nbsp;{this.state.purchaseListCompletedCount} of {totalPurchaseCounter} tasks complete</p>\n            </div>\n            <div className=\"purchaseList\" hidden= {this.state.hidePurchaseList}>\n              <PurchaseTodoList completedCount={this.state.completedPurchasesCounter} />\n            </div>\n          </div>\n\n          <div className=\"airplaneListWrap \">\n            <div className=\"container segment airplaneSegment\" onClick={this.showAirplaneList} hidden={this.state.hideAirplaneDetails}> \n              <span className=\"fa fa-caret-right\"></span>   \n              <label className=\"segmentLabelItem\">Build Airplane</label>\n              <p className=\"segmentLabelItem segmentPitem \">&nbsp;&nbsp;&nbsp;{this.state.airplaneListCompletedCount} of {totalAirplaneCounter} tasks complete</p>\n              \n            </div>\n            \n            <div className=\"airplaneList\" hidden= {this.state.hideAirplaneList}>\n              <AirplaneTodoList completedCount={this.state.purchaseListCompletedCount} />\n            </div>\n          </div>\n        </div>\n      </div>      \n    );\n  }\n}\n\n//creating a single todo item class\nexport class SingleItem extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    //set initial state for todo items\n    this.state = {\n      'disabled': false,\n      'completedAt' : '',\n      'completed' : false,\n      'itemId': this.props.id\n    }\n\n    //set initial state for todo items with no dependency ids\n    if(this.props.id !== 1 && this.props.id !== 8){\n      this.state = {\n        'disabled': true ,\n        'completedAt' : '',\n        'completed' : false,\n        'itemId': this.props.id\n\n      }\n    }\n\n    this.toggleComplete = this.toggleComplete.bind(this); //binding toggleComplete function\n    this.removeDisable = this.removeDisable.bind(this); //binding removeDisable function\n  }\n\n\n  //function to toggle the state of complete/checked for the list items\n  toggleComplete(e){\n    //e.preventDefault();\n    //e.stopPropagation();\n\n    //on checkbox isChecked(change), update completedAt with timestamp, else, remove timesamp(set to null)\n    if(this.props.group === 'Purchases') {\n\n      if (this.state.completed === false){ //if the item is not complete\n\n        completedPurchasesCounter++; //increment purchase counter\n        \n        //set the state\n        this.setState({\n          completedAt: new Date(),\n          completed: true,\n          completedPurchases: completedPurchasesCounter\n        });\n\n      } else { // if the item is complete\n\n        if(completedPurchasesCounter !== 0){ //if the counter is not 0(preventing negatives)\n          completedPurchasesCounter--; //decrement purchase counter \n        }\n\n        //set the state\n        this.setState(prevState => ({\n          completedAt: '',\n          completed: false,\n          completedPurchases: completedPurchasesCounter\n        }));\n\n      }\n\n    } else {\n      if (this.state.completedAt === ''){ //if the item is not complete\n\n        completedAirplaneCounter++; //increment airplane counter\n\n        //set standard state\n        this.setState({\n          completedAt: new Date(),\n          completed: true\n        });\n\n        //set state based on previous states\n        this.setState(prevState => ({\n          completedAt: prevState,\n          completed: prevState,\n          completedPurchases: completedAirplaneCounter\n        }));\n\n      } else { //if the item is complete\n\n        if(completedAirplaneCounter !== 0){ //if the counter is not 0(preventing negatives)\n          completedAirplaneCounter--; //decrement airplane counter\n        }\n\n        //set state based on previous states\n        this.setState(prevState => ({\n          completedAt: '',\n          completed: false,\n          completedPurchases: completedAirplaneCounter\n        }));\n\n      }\n\n    }\n\n    this.removeDisable(); //remove disable attribute from items\n\n  }\n\n  removeDisable(e){\n\n    //looping through all todo list items\n    toDoList.map((todoItem) =>{\n\n      var ids = todoItem.dependencyIds; //declaring dependency ID list\n      var id = todoItem.id; //declaring item ID\n\n      //looping through item's dependency id list\n      ids.map((item) => {\n        let currentItemString = \"itemID\" + id;\n        var currentItem = document.getElementById(currentItemString); //declaring the current item being changed\n\n        let idString = \"itemID\" + item;\n        var depenencyItem = document.getElementById(idString); //declaring the dependency items based on the item being changed\n\n        if(depenencyItem !== null){ //if there is a dependency item\n          if(!depenencyItem.checked === true){ //if dependency item is not checked\n\n            let spanIdString = \"spanID\" + id;\n            var lockSpan = document.getElementById(spanIdString); //getting the element's span with lock\n            lockSpan.classList.add('disabledLock');\n            lockSpan.classList.add('fa');\n            lockSpan.classList.add('fa-lock');\n\n            let labelIdString = \"labelID\" + id;\n            var labelSpan = document.getElementById(labelIdString); //getting the element's label \n            labelSpan.classList.add('disabledLock');\n            labelSpan.classList.remove('doneTextStyle');\n            \n            currentItem.checked = false; //setting the current item to Not checked\n\n            if((this.props.id !== 1) && (this.props.id !== 8)){\n\n              currentItem.setAttribute('disabled', true); //set item to disabled\n\n              if(this.state.completed === true){ //if the item is completed\n                if(this.props.group === 'Purchases'){\n                  //to prevent negative numbers\n                  if(completedPurchasesCounter !== 0){\n                    completedPurchasesCounter = completedPurchasesCounter--; //decrement counter\n                  }\n\n                  //set state\n                  this.setState(prevState => ({\n                    disabled: true,\n                    completed: true,\n                    \n                  }));\n                } else {\n                  //to prevent negative numbers\n                  if(completedAirplaneCounter !== 0){\n                    completedAirplaneCounter = completedAirplaneCounter--; //decrement counter\n                  }\n\n                  //set state\n                  this.setState(prevState => ({\n                    disabled: true,\n                    completed: false,\n                    \n                  }));\n\n                }\n              }\n\n            } else if(this.state.itemId === 1 || this.state.itemId === 8){\n              this.setState(prevState => ({\n                disabled: false,\n                completed: prevState.completed,\n              }));\n\n            }\n\n          } else {\n            currentItem.removeAttribute('disabled'); //remove disabled attribute\n\n            let spanIdString = \"spanID\" + id;\n            let lockSpan = document.getElementById(spanIdString); //getting the element's span with lock\n            lockSpan.classList.remove('disabledLock');\n            lockSpan.classList.remove('fa-lock');\n\n            let labelIdString = \"labelID\" + id;\n            let labelSpan = document.getElementById(labelIdString); //getting the element's label\n            labelSpan.classList.remove('disabledLock');\n\n            //set state\n            this.setState(prevState => ({\n              disabled: false,\n            }));\n\n          }\n        } else {\n          console.log('no dependency item');\n        }\n      \n      });\n\n    });\n\n    //if the item with this dependency id# is NOT disabled (state is NOT disabled)\n    //then this item is not disabled (state is not disabled)\n\n  }\n\n  render() {\n\n    if(this.state.completedAt){ //if item has completedAt state\n      if(this.state.completedAt !== ''){\n        var checkComplete = true; //add checkmark\n        var completedTaskClass = 'doneTextStyle'; //add class for done text\n        var disabledLock = ''; //add class for lock\n        \n      } else {\n        var checkComplete = false; //add checkmark\n        var completedTaskClass = ''; //add class for done text\n        var disabledLock = 'fa fa-lock'; //add class for lock\n      }\n    } else {\n      var checkComplete = false; //add checkmark\n      var completedTaskClass = ''; //add class for done text\n      if(this.state.completed === false && this.state.disabled === false){\n        var disabledLock = ''; //add class for lock\n      } else {\n        var disabledLock = 'fa fa-lock'; //add class for lock\n      }\n    }\n\n    if(this.state.itemId === 1){\n      var disabledLock = ''; //add class for lock\n    }\n\n    if(this.state.itemId === 8){\n      var disabledLock = ''; //add class for lock\n    }\n\n    //return html markup for list item\n    return (\n      <div key={this.props.id} className={\"segment \" + (this.props.group)}>\n        <label className={\"labelContainer disabledItem \" + completedTaskClass } id={\"labelID\" + this.props.id}>{this.props.task}\n          <input type=\"checkbox\" checked={this.state.checkComplete} keyprop={this.props.id} id={\"itemID\" + this.props.id} value={this.props.id} onChange={this.toggleComplete} disabled={this.state.disabled}/>\n          \n          <span id={\"spanID\" + this.props.id} className={\"checkmark checkmark-outline disabledCheckbox disabledLock \" + disabledLock} aria-hidden=\"true\"/>\n        </label>\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}