{"ast":null,"code":"var _jsxFileName = \"/Users/bruce/Desktop/papa-list/papa-takehome/src/App.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport { toDoList } from './ListData'; // import {PurchaseTodoList} from './PurchaseTodoList';\n// import {AirplaneTodoList} from './AirplaneTodoList';\n\nimport { TotalTaskListWrap } from './TotalTaskListWrap'; //creating a single todo item class\n\nexport class SingleItem extends React.Component {\n  constructor(props) {\n    super(props); //set initial state for todo items\n\n    this.state = {\n      'disabled': false,\n      'completedAt': '',\n      'completed': false,\n      'itemId': this.props.id //set initial state for todo items with no dependency ids\n\n    };\n\n    if (this.props.id !== 1 && this.props.id !== 8) {\n      this.state = {\n        'disabled': true,\n        'completedAt': '',\n        'completed': false,\n        'itemId': this.props.id\n      };\n    }\n\n    this.toggleComplete = this.toggleComplete.bind(this); //binding toggleComplete function\n\n    this.removeDisable = this.removeDisable.bind(this); //binding removeDisable function\n  } //function to toggle the state of complete/checked for the list items\n\n\n  toggleComplete(e) {\n    //e.preventDefault();\n    //e.stopPropagation();\n    //on checkbox isChecked(change), update completedAt with timestamp, else, remove timesamp(set to null)\n    if (this.props.group === 'Purchases') {\n      if (this.state.completed == false) {\n        //if the item is not complete\n        completedPurchasesCounter++; //increment purchase counter\n        //set the state\n\n        this.setState({\n          completedAt: new Date(),\n          completed: true,\n          completedPurchases: completedPurchasesCounter\n        });\n      } else {\n        // if the item is complete\n        if (completedPurchasesCounter !== 0) {\n          //if the counter is not 0(preventing negatives)\n          completedPurchasesCounter--; //decrement purchase counter \n        } //set the state\n\n\n        this.setState(prevState => ({\n          completedAt: '',\n          completed: false,\n          completedPurchases: completedPurchasesCounter\n        }));\n      }\n    } else {\n      if (this.state.completedAt === '') {\n        //if the item is not complete\n        completedAirplaneCounter++; //increment airplane counter\n        //set standard state\n\n        this.state = {\n          completedAt: new Date(),\n          completed: true //set state based on previous states\n\n        };\n        this.setState(prevState => ({\n          completedAt: prevState,\n          completed: prevState,\n          completedPurchases: completedAirplaneCounter\n        }));\n      } else {\n        //if the item is complete\n        if (completedAirplaneCounter !== 0) {\n          //if the counter is not 0(preventing negatives)\n          completedAirplaneCounter--; //decrement airplane counter\n        } //set state based on previous states\n\n\n        this.setState(prevState => ({\n          completedAt: '',\n          completed: false,\n          completedPurchases: completedAirplaneCounter\n        }));\n      }\n    }\n\n    this.removeDisable(); //remove disable attribute from items\n  }\n\n  removeDisable(e) {\n    //looping through all todo list items\n    const ListItems = toDoList.map(todoItem => {\n      var ids = todoItem.dependencyIds; //declaring dependency ID list\n\n      var id = todoItem.id; //declaring item ID\n      //looping through item's dependency id list\n\n      ids.map(item => {\n        let currentItemString = \"itemID\" + id;\n        var currentItem = document.getElementById(currentItemString); //declaring the current item being changed\n\n        let idString = \"itemID\" + item;\n        var depenencyItem = document.getElementById(idString); //declaring the dependency items based on the item being changed\n\n        if (depenencyItem !== null) {\n          //if there is a dependency item\n          if (!depenencyItem.checked === true) {\n            //if dependency item is not checked\n            let spanIdString = \"spanID\" + id;\n            var lockSpan = document.getElementById(spanIdString); //getting the element's span with lock\n\n            lockSpan.classList.add('disabledLock');\n            lockSpan.classList.add('fa');\n            lockSpan.classList.add('fa-lock');\n            let labelIdString = \"labelID\" + id;\n            var labelSpan = document.getElementById(labelIdString); //getting the element's label \n\n            labelSpan.classList.add('disabledLock');\n            labelSpan.classList.remove('doneTextStyle');\n            currentItem.checked = false; //setting the current item to Not checked\n\n            if (this.props.id !== 1 && this.props.id !== 8) {\n              currentItem.setAttribute('disabled', true); //set item to disabled\n\n              if (this.state.completed == true) {\n                //if the item is completed\n                if (this.props.group === 'Purchases') {\n                  //to prevent negative numbers\n                  if (completedPurchasesCounter !== 0) {\n                    completedPurchasesCounter = completedPurchasesCounter--; //decrement counter\n                  } //set state\n\n\n                  this.setState(prevState => ({\n                    disabled: true,\n                    completed: true\n                  }));\n                } else {\n                  //to prevent negative numbers\n                  if (completedAirplaneCounter !== 0) {\n                    completedAirplaneCounter = completedAirplaneCounter--; //decrement counter\n                  } //set state\n\n\n                  this.setState(prevState => ({\n                    disabled: true,\n                    completed: false\n                  }));\n                }\n              }\n            } else if (this.state.itemId === 1 || this.state.itemId === 8) {\n              this.setState(prevState => ({\n                disabled: false,\n                completed: prevState.completed\n              }));\n            }\n          } else {\n            currentItem.removeAttribute('disabled'); //remove disabled attribute\n\n            let spanIdString = \"spanID\" + id;\n            var lockSpan = document.getElementById(spanIdString); //getting the element's span with lock\n\n            lockSpan.classList.remove('disabledLock');\n            lockSpan.classList.remove('fa-lock');\n            let labelIdString = \"labelID\" + id;\n            var labelSpan = document.getElementById(labelIdString); //getting the element's label\n\n            labelSpan.classList.remove('disabledLock'); //set state\n\n            this.setState(prevState => ({\n              disabled: false\n            }));\n          }\n        } else {\n          console.log('no dependency item');\n        }\n      });\n    }); //if the item with this dependency id# is NOT disabled (state is NOT disabled)\n    //then this item is not disabled (state is not disabled)\n  }\n\n  render() {\n    if (this.state.completedAt) {\n      //if item has completedAt state\n      if (this.state.completedAt !== '') {\n        var checkComplete = true; //add checkmark\n\n        var completedTaskClass = 'doneTextStyle'; //add class for done text\n\n        var disabledLock = ''; //add class for lock\n      } else {\n        var checkComplete = false; //add checkmark\n\n        var completedTaskClass = ''; //add class for done text\n\n        var disabledLock = 'fa fa-lock'; //add class for lock\n      }\n    } else {\n      var checkComplete = false; //add checkmark\n\n      var completedTaskClass = ''; //add class for done text\n\n      if (this.state.completed === false && this.state.disabled === false) {\n        var disabledLock = ''; //add class for lock\n      } else {\n        var disabledLock = 'fa fa-lock'; //add class for lock\n      }\n    }\n\n    if (this.state.itemId === 1) {\n      var disabledLock = ''; //add class for lock\n    }\n\n    if (this.state.itemId === 8) {\n      var disabledLock = ''; //add class for lock\n    } //return html markup for list item\n\n\n    return React.createElement(\"div\", {\n      key: this.props.id,\n      className: \"segment \" + this.props.group,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"labelContainer disabledItem \" + completedTaskClass,\n      id: \"labelID\" + this.props.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, this.props.task, React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: this.state.checkComplete,\n      keyprop: this.props.id,\n      id: \"itemID\" + this.props.id,\n      value: this.props.id,\n      onChange: this.toggleComplete,\n      disabled: this.state.disabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      id: \"spanID\" + this.props.id,\n      className: \"checkmark checkmark-outline disabledCheckbox disabledLock \" + disabledLock,\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    })));\n  }\n\n} //Standard App class\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    //return totaltasklistwrap markup\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(TotalTaskListWrap, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bruce/Desktop/papa-list/papa-takehome/src/App.js"],"names":["React","ReactDOM","toDoList","TotalTaskListWrap","SingleItem","Component","constructor","props","state","id","toggleComplete","bind","removeDisable","e","group","completed","completedPurchasesCounter","setState","completedAt","Date","completedPurchases","prevState","completedAirplaneCounter","ListItems","map","todoItem","ids","dependencyIds","item","currentItemString","currentItem","document","getElementById","idString","depenencyItem","checked","spanIdString","lockSpan","classList","add","labelIdString","labelSpan","remove","setAttribute","disabled","itemId","removeAttribute","console","log","render","checkComplete","completedTaskClass","disabledLock","task","App"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport {toDoList} from './ListData';\n// import {PurchaseTodoList} from './PurchaseTodoList';\n// import {AirplaneTodoList} from './AirplaneTodoList';\nimport {TotalTaskListWrap} from './TotalTaskListWrap';\n\n\n\n\n\n//creating a single todo item class\nexport class SingleItem extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    //set initial state for todo items\n    this.state = {\n      'disabled': false,\n      'completedAt' : '',\n      'completed' : false,\n      'itemId': this.props.id\n    }\n\n    //set initial state for todo items with no dependency ids\n    if(this.props.id !== 1 && this.props.id !== 8){\n      this.state = {\n        'disabled': true ,\n        'completedAt' : '',\n        'completed' : false,\n        'itemId': this.props.id\n\n      }\n    }\n\n    this.toggleComplete = this.toggleComplete.bind(this); //binding toggleComplete function\n    this.removeDisable = this.removeDisable.bind(this); //binding removeDisable function\n  }\n\n\n  //function to toggle the state of complete/checked for the list items\n  toggleComplete(e){\n    //e.preventDefault();\n    //e.stopPropagation();\n\n    //on checkbox isChecked(change), update completedAt with timestamp, else, remove timesamp(set to null)\n    if(this.props.group === 'Purchases') {\n\n      if (this.state.completed == false){ //if the item is not complete\n\n        completedPurchasesCounter++; //increment purchase counter\n        \n        //set the state\n        this.setState({\n          completedAt: new Date(),\n          completed: true,\n          completedPurchases: completedPurchasesCounter\n        });\n\n      } else { // if the item is complete\n\n        if(completedPurchasesCounter !== 0){ //if the counter is not 0(preventing negatives)\n          completedPurchasesCounter--; //decrement purchase counter \n        }\n\n        //set the state\n        this.setState(prevState => ({\n          completedAt: '',\n          completed: false,\n          completedPurchases: completedPurchasesCounter\n        }));\n\n      }\n\n    } else {\n      if (this.state.completedAt === ''){ //if the item is not complete\n\n        completedAirplaneCounter++; //increment airplane counter\n\n        //set standard state\n        this.state = {\n          completedAt: new Date(),\n          completed: true\n        }\n\n        //set state based on previous states\n        this.setState(prevState => ({\n          completedAt: prevState,\n          completed: prevState,\n          completedPurchases: completedAirplaneCounter\n        }));\n\n      } else { //if the item is complete\n\n        if(completedAirplaneCounter !== 0){ //if the counter is not 0(preventing negatives)\n          completedAirplaneCounter--; //decrement airplane counter\n        }\n\n        //set state based on previous states\n        this.setState(prevState => ({\n          completedAt: '',\n          completed: false,\n          completedPurchases: completedAirplaneCounter\n        }));\n\n      }\n\n    }\n\n    this.removeDisable(); //remove disable attribute from items\n\n  }\n\n  removeDisable(e){\n\n    //looping through all todo list items\n    const ListItems = toDoList.map((todoItem) =>{\n\n      var ids = todoItem.dependencyIds; //declaring dependency ID list\n      var id = todoItem.id; //declaring item ID\n\n      //looping through item's dependency id list\n      ids.map((item) => {\n        let currentItemString = \"itemID\" + id;\n        var currentItem = document.getElementById(currentItemString); //declaring the current item being changed\n\n        let idString = \"itemID\" + item;\n        var depenencyItem = document.getElementById(idString); //declaring the dependency items based on the item being changed\n\n        if(depenencyItem !== null){ //if there is a dependency item\n          if(!depenencyItem.checked === true){ //if dependency item is not checked\n\n            let spanIdString = \"spanID\" + id;\n            var lockSpan = document.getElementById(spanIdString); //getting the element's span with lock\n            lockSpan.classList.add('disabledLock');\n            lockSpan.classList.add('fa');\n            lockSpan.classList.add('fa-lock');\n\n            let labelIdString = \"labelID\" + id;\n            var labelSpan = document.getElementById(labelIdString); //getting the element's label \n            labelSpan.classList.add('disabledLock');\n            labelSpan.classList.remove('doneTextStyle');\n            \n            currentItem.checked = false; //setting the current item to Not checked\n\n            if((this.props.id !== 1) && (this.props.id !== 8)){\n\n              currentItem.setAttribute('disabled', true); //set item to disabled\n\n              if(this.state.completed == true){ //if the item is completed\n                if(this.props.group === 'Purchases'){\n                  //to prevent negative numbers\n                  if(completedPurchasesCounter !== 0){\n                    completedPurchasesCounter = completedPurchasesCounter--; //decrement counter\n                  }\n\n                  //set state\n                  this.setState(prevState => ({\n                    disabled: true,\n                    completed: true,\n                    \n                  }));\n                } else {\n                  //to prevent negative numbers\n                  if(completedAirplaneCounter !== 0){\n                    completedAirplaneCounter = completedAirplaneCounter--; //decrement counter\n                  }\n\n                  //set state\n                  this.setState(prevState => ({\n                    disabled: true,\n                    completed: false,\n                    \n                  }));\n\n                }\n              }\n\n            } else if(this.state.itemId === 1 || this.state.itemId === 8){\n              this.setState(prevState => ({\n                disabled: false,\n                completed: prevState.completed,\n              }));\n\n            }\n\n          } else {\n            currentItem.removeAttribute('disabled'); //remove disabled attribute\n\n            let spanIdString = \"spanID\" + id;\n            var lockSpan = document.getElementById(spanIdString); //getting the element's span with lock\n            lockSpan.classList.remove('disabledLock');\n            lockSpan.classList.remove('fa-lock');\n\n            let labelIdString = \"labelID\" + id;\n            var labelSpan = document.getElementById(labelIdString); //getting the element's label\n            labelSpan.classList.remove('disabledLock');\n\n            //set state\n            this.setState(prevState => ({\n              disabled: false,\n            }));\n\n          }\n        } else {\n          console.log('no dependency item');\n        }\n      \n      });\n\n    });\n\n    //if the item with this dependency id# is NOT disabled (state is NOT disabled)\n    //then this item is not disabled (state is not disabled)\n\n  }\n\n  render() {\n\n    if(this.state.completedAt){ //if item has completedAt state\n      if(this.state.completedAt !== ''){\n        var checkComplete = true; //add checkmark\n        var completedTaskClass = 'doneTextStyle'; //add class for done text\n        var disabledLock = ''; //add class for lock\n        \n      } else {\n        var checkComplete = false; //add checkmark\n        var completedTaskClass = ''; //add class for done text\n        var disabledLock = 'fa fa-lock'; //add class for lock\n      }\n    } else {\n      var checkComplete = false; //add checkmark\n      var completedTaskClass = ''; //add class for done text\n      if(this.state.completed === false && this.state.disabled === false){\n        var disabledLock = ''; //add class for lock\n      } else {\n        var disabledLock = 'fa fa-lock'; //add class for lock\n      }\n    }\n\n    if(this.state.itemId === 1){\n      var disabledLock = ''; //add class for lock\n    }\n\n    if(this.state.itemId === 8){\n      var disabledLock = ''; //add class for lock\n    }\n\n    //return html markup for list item\n    return (\n      <div key={this.props.id} className={\"segment \" + (this.props.group)}>\n        <label className={\"labelContainer disabledItem \" + completedTaskClass } id={\"labelID\" + this.props.id}>{this.props.task}\n          <input type=\"checkbox\" checked={this.state.checkComplete} keyprop={this.props.id} id={\"itemID\" + this.props.id} value={this.props.id} onChange={this.toggleComplete} disabled={this.state.disabled}/>\n          \n          <span id={\"spanID\" + this.props.id} className={\"checkmark checkmark-outline disabledCheckbox disabledLock \" + disabledLock} aria-hidden=\"true\"/>\n        </label>\n      </div>\n    );\n  }\n}\n\n\n\n\n\n\n\n//Standard App class\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n  }\n\n  render() {\n    //return totaltasklistwrap markup\n    return (\n\n      <div className=\"App\">\n            \n        <TotalTaskListWrap />\n\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}